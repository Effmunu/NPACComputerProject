#ifndef Fcn_MLE_2D
#define Fcn_MLE_2D

#include <TMath.h>
#include <cmath>

const int N=100;
float data[N]={1.8,-1.36,1.32,-0.466,1.41,-0.525,-2.38,-0.564,-0.383,-1.3,2.66,-2.57,-0.508,-3.58,-2.73,-3.45,1.29,-2.02,0.875,-1.24,4.13,-3.12,2.16,-1.4,-0.696,-1.5,-0.801,3.66,-0.934,3.99,-0.389,-1.33,2.99,-0.192,2.95,2.28,-0.7,-0.838,-1.05,-0.66,-2.95,-0.373,-0.351,-0.557,-3.31,3.44,-1.13,-0.944,-3,-3.02,-4.82,2.54,0.674,0.252,0.137,-2.8,-1.72,-2.13,-6.08,-3.08,-3.14,-0.923,3.56,-1.43,-5.32,-1.06,3.52,-2.35,0.164,-1.21,-1.97,-1.25,-1.06,-0.68,1.48,0.601,-0.468,2.24,0.39,-1.63,1.65,2.66,1.75,-2.37,0.211,-2.06,-1.76,-3.26,1.77,0.267,-3.67,2.56,0.0849,-0.792,-1.13,0.41,-1.39,2.92,-0.492,-0.22};

double gaussian(double x, double mu, double sigma)
{
    return (1./sqrt(2*TMath::Pi())/sigma) * exp(- (x-mu)*(x-mu) / 2/sigma/sigma);
}

void fcn_to_minimize(int& npar, double* deriv, double& fvalue, double par[], int flag);

#endif

